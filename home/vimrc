"start Vundle
filetype off
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
Plugin 'gmarik/Vundle.vim'

"--- Overall behaviors ---

"molokai
"A color theme (only used in gvim)
Plugin 'tomasr/molokai'
let g:rehash256 = 1

"vim-airline
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
let g:airline_powerline_fonts = 1
let g:airline_symbols = {'colnr': ' â„…:'}
let g:airline_exclude_preview = 1
let g:airline#extensions#whitespace#checks = [ 'indent', 'long' ]
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#formatter = 'unique_tail_improved'
let g:airline#extensions#tabline#buffer_idx_mode = 1
nmap <Leader>1 <Plug>AirlineSelectTab1
nmap <Leader>2 <Plug>AirlineSelectTab2
nmap <Leader>3 <Plug>AirlineSelectTab3
nmap <Leader>4 <Plug>AirlineSelectTab4
nmap <Leader>5 <Plug>AirlineSelectTab5
nmap <Leader>6 <Plug>AirlineSelectTab6
nmap <Leader>7 <Plug>AirlineSelectTab7
nmap <Leader>8 <Plug>AirlineSelectTab8
nmap <Leader>9 <Plug>AirlineSelectTab9
nmap <Leader>[ <Plug>AirlineSelectPrevTab
nmap <Leader>] <Plug>AirlineSelectNextTab

"vim-easymotion (quick move motion support, \\motion)
Plugin 'Lokaltog/vim-easymotion'

"bufkill.vim (Keep window layout when killing buffers)
Plugin 'qpkorr/vim-bufkill'
cnorea <expr> bd (getcmdtype() == ':' ? 'BD' : 'bd')
cnorea <expr> bw (getcmdtype() == ':' ? 'BW' : 'bd')
cnorea <expr> bun (getcmdtype() == ':' ? 'BUN' : 'bd')
noremap <C-TAB> :bn<CR>
noremap <C-S-TAB> :bp<CR>
noremap <C-F4> :BD<CR>
noremap <Leader>bn :bn<CR>
noremap <Leader>bp :bp<CR>
"exclude quickfix from buffer list
autocmd FileType qf set nobuflisted

"lusty (LustyExplorer + LustyJuggler)
Plugin 'sjbach/lusty'

"nerdtree (file explorer window)
Plugin 'scrooloose/nerdtree'
let NERDTreeMinimalUI = 1
let NERDTreeShowBookmarks = 1
let NERDTreeWinSize = 18
let NERDTreeChDirMode = 2
noremap <Leader>n :NERDTreeToggle<CR>

"delimitMate (match pairs)
Plugin 'Raimondi/delimitMate'
let delimitMate_expand_cr = 1
let delimitMate_expand_space = 1
let delimitMate_balance_matchpairs = 1
autocmd FileType python let b:delimitMate_nesting_quotes = ['"', "'"]

"vim-table-mode (toggled by \tm, and then start a line with ||)
Plugin 'dhruvasagar/vim-table-mode'

"nerdcommenter
Plugin 'scrooloose/nerdcommenter'
let NERDSpaceDelims = 1

"ag.vim
Plugin 'rking/ag.vim'

"--- Indent enhancement ---

"vim-sleuth (automatically detect buffer indentation: shiftwidth & expandtab)
Plugin 'tpope/vim-sleuth'

"indentLine (show indent lines)
Plugin 'Yggdroot/indentLine'

"Reset indent line after automatic detection
"A workaround to defer setting this autocmd, so that it's after sleuth.
autocmd VimEnter * autocmd FileType * IndentLinesReset

"Wrapper to manually adjust shiftwidth
command -nargs=1 SW setlocal shiftwidth=<args> | IndentLinesReset

"--- General coding ---

"syntastic
Plugin 'scrooloose/syntastic'
"This must be disabled! Otherwise when openning C/C++ files,
"syntastic will use its own checker to run a check, overwrite YCM.
"let g:syntastic_check_on_open = 1
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_check_on_wq = 0
let g:syntastic_aggregate_errors = 1
let g:syntastic_loc_list_height = 5
"Use rust-analyzer (through YouCompleteMe) instead.
let g:syntastic_rust_checkers = []
let g:syntastic_python_checkers = ['pyflakes']
let g:syntastic_go_checkers = ['go', 'golint', 'govet']
"Suppress errors caused by custom elements.
let g:syntastic_html_tidy_ignore_errors = [' is not recognized!']
let g:syntastic_html_tidy_args = '--show-warnings no'
noremap <Leader>e :SyntasticCheck<CR> :Errors<CR>

"YouCompleteMe
Plugin 'Valloric/YouCompleteMe'
let g:ycm_global_ycm_extra_conf = '~/.vim/bundle/YouCompleteMe/ycm_extra_conf_default.py'
let g:ycm_min_num_of_chars_for_completion = 3
let g:ycm_autoclose_preview_window_after_insertion = 1
let g:ycm_key_invoke_completion = '<C-k>'
let g:ycm_confirm_extra_conf = 0
let g:ycm_seed_identifiers_with_syntax = 1
let g:ycm_collect_identifiers_from_tags_files = 1
"Ask YCM to search python in PATH so that virtualenv can be used.
let g:ycm_python_binary_path = 'python'
noremap <Leader>r :YcmForceCompileAndDiagnostics<CR>
noremap <F5> :YcmForceCompileAndDiagnostics<CR>
autocmd FileType c,cpp,objc,objcpp,cuda,typescript,go,rust
	\ noremap <buffer> <Leader>e :YcmDiags<CR>
autocmd FileType c,cpp,objc,objcpp,cs,python,typescript,go,rust
	\ noremap <buffer> gD :YcmCompleter GoTo<CR>

"tagbar
Plugin 'majutsushi/tagbar'
noremap <Leader>d :TagbarToggle<CR>

"vim-autotag
Plugin 'craigemery/vim-autotag'
"search tags upwards till HOME
set tags+=./tags;$HOME

"lid.vim
Plugin 'yegappan/lid'

"EditorConfig support
Plugin 'editorconfig/editorconfig-vim'

"-- Python --

"Highlight unnecessary whitespace and format errors
let python_highlight_all = 1

"vim-python-pep8-indent (make the indent compatible with PEP8)
Plugin 'Vimjas/vim-python-pep8-indent'

"-- HTML (like) --

"closetag.vim (CTRL+_)
Plugin 'closetag.vim'

"MatchTagAlways (high light tags)
Plugin 'Valloric/MatchTagAlways'

"html5.vim
Plugin 'othree/html5.vim'

"vim-html-template-literals
Plugin 'jonsmithers/vim-html-template-literals'

"vim-css3-syntax (full CSS3 support including partial Scss)
Plugin 'hail2u/vim-css3-syntax'

"vim-css-color (show background color for CSS color definitions)
Plugin 'ap/vim-css-color'

"-- Other languages --

"vim-go
Plugin 'fatih/vim-go'
let g:go_fmt_command = 'goimports'
"Use youcompleteme for Go completion.
let g:go_def_mapping_enabled = 0
let g:go_gopls_enabled = 0
let g:go_code_completion_enabled = 0

"vim-markdown (advanced support for Markdown, e.g. navigation)
Plugin 'plasticboy/vim-markdown'
let g:vim_markdown_folding_disabled = 1
let g:vim_markdown_conceal = 0
"let g:vim_markdown_math = 1
let g:vim_markdown_frontmatter = 1
autocmd FileType markdown
	\ setl tw=90 |
	\ setl spell

"vim-cpp-modern
Plugin 'bfrg/vim-cpp-modern'

"rust.vim
Plugin 'rust-lang/rust.vim'

"typescript-vim
Plugin 'HerringtonDarkholme/yats.vim'

"manpageview (show man page at cursor, [ctrl]K in normal mode)
"Plugin 'dkasak/manpageview'
Plugin 'vim-utils/vim-man'

"django.vim (Django template syntax support)
"Plugin 'django.vim'

"vim-jade
Plugin 'digitaltoad/vim-jade'

"llvm.vim
Plugin 'Hexcles/llvm.vim'

"vim-javascript
Plugin 'pangloss/vim-javascript'

"json5.vim
Plugin 'GutenYe/json5.vim'

"inline_edit
"Automatically switch to other syntax inside embedded code block
"(e.g. JavaScript in HTML and more!)
Plugin 'AndrewRadev/inline_edit.vim'

call vundle#end()
filetype plugin indent on
"end Vundle

"--- Non-plugin settings ---

"runtime! ftplugin/man.vim

"enable tag matching for % jump
runtime! macros/matchit.vim

"Use molokai for colorful terminals
"(This has to be after Vundle section ends, otherwise cannot find scheme.)
if &term =~ '.*256color'
	colorscheme molokai
endif

"Fix alt/meta key in GNOME terminal
let c='a'
while c <= 'z'
  exec "set <A-".c.">=\e".c
  exec "imap \e".c." <A-".c.">"
  let c = nr2char(1+char2nr(c))
endw
"Set a very short keycode timeout so that <A-x> will not be confused with <ESC>x
set ttimeout ttimeoutlen=20

"persistent undo
set undofile
set undodir=$HOME/.vim/undo

"preview window
set previewheight=2

"Always show statusline (needed by vim-airline)
set laststatus=2

"Highlight current line
set cursorline

"The first tab completes as much as it can, second tab displays a list of
"options, and the third tab will present a list that allows you to scroll
"through and select filenames beginning with that prefix.
set wildmode=longest,list,full
set wildmenu

"Update tagbar faster (also affects CursorHold).
set updatetime=1000

"Set a short 2ms timeout for matchparens to prevent slowing down scrolling.
let g:matchparen_timeout = 2
let g:matchparen_insert_timeout = 2

"Window navigation and resizing
noremap <C-J> <C-W>j
noremap <C-K> <C-W>k
noremap <C-H> <C-W>h
noremap <C-L> <C-W>l
noremap <A-h> <C-w><
noremap <A-j> <C-W>-
noremap <A-k> <C-W>+
noremap <A-l> <C-w>>

"Quick nohighlight
noremap /<Enter> :nohlsearch<Enter>

"Some uncommon file extensions
autocmd BufRead,BufNewFile *.cuh set filetype=cuda
autocmd BufRead,BufNewFile *.pablo set filetype=python
